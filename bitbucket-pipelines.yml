#  Template NodeJS build

#  This template allows you to validate your NodeJS code.
#  The workflow allows running tests and code linting on the default branch.

pipelines:
  branches:
    '{develop,master}':
    - step:
        name: Build image and push to GCR
        image: google/cloud-sdk:latest
        size: 2x
        artifacts:
          - dist/*
        services:
          - docker
        script:
          - echo "$GCLOUD_API_KEYFILE" | base64 -d > ~/.gcloud-api-key.json
          - export BITBUCKET_COMMIT_SHORT="${BITBUCKET_COMMIT::7}"
          - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
          - docker login -u _json_key --password-stdin https://$DOCKER_GCR_REPO_URL < ~/.gcloud-api-key.json
          - docker build -t $DOCKER_IMAGE_NAME:${BITBUCKET_COMMIT} .
          - docker tag $DOCKER_IMAGE_NAME:${BITBUCKET_COMMIT} $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT_SHORT
          - docker push $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT_SHORT
          - docker tag $DOCKER_IMAGE_NAME:${BITBUCKET_COMMIT} $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:latest
          - docker push $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:latest
    - step:
        name: Deploy image to GKE
        image: google/cloud-sdk:latest
        deployment: DEV
        runs-on:
          - 'env.dev'
        script:
          - echo "$GKE_DEPLOY_KEY" | base64 -d > ~/.gcloud-api-key.json
          - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
          - gcloud config set project $GCLOUD_PROJECT_ID
          - gcloud container clusters get-credentials $GCLOUD_CLUSTER --zone=$GCLOUD_ZONE --project $GCLOUD_PROJECT_ID
          - kubectl rollout restart deployment capital-ui
          - kubectl rollout status deployment capital-ui
    release:
      - step:
          name: Deploy image to QA
          image: google/cloud-sdk:latest
          deployment: QA
          runs-on:
            - 'env.qa'
          script:
            - echo "$GKE_DEPLOY_KEY" | base64 -d > ~/.gcloud-api-key.json
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - gcloud config set project $GCLOUD_PROJECT_ID
            - gcloud container clusters get-credentials $GCLOUD_QA_CLUSTER --zone=$GCLOUD_ZONE --project $GCLOUD_PROJECT_ID
            - export BITBUCKET_COMMIT_SHORT="${BITBUCKET_COMMIT::7}"
            - gcloud container images untag $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:QA --quiet
            - gcloud container images add-tag $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT_SHORT $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:QA --quiet
            - kubectl rollout restart deployment capital-ui
            - kubectl rollout status deployment capital-ui
    prod:
      - step:
          name: Deploy image to PROD
          image: google/cloud-sdk:latest
          deployment: PROD
          services:
            - docker
          script:
            - echo "$GCLOUD_API_KEYFILE" | base64 -d > ~/.gcloud-api-key.json
            - export BITBUCKET_COMMIT_SHORT="${BITBUCKET_COMMIT::7}"
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - docker login -u _json_key --password-stdin https://$DOCKER_GCR_REPO_URL < ~/.gcloud-api-key.json
            - docker pull $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT_SHORT
            - docker tag $DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT_SHORT $DOCKER_GCR_REPO_URL/$GCLOUD_PROD_PROJECT_ID/$DOCKER_IMAGE_NAME:latest
            - echo "$PROD_GCR_KEY" | base64 -d > ~/.gcloud-api-key.json
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - docker login -u _json_key --password-stdin https://$DOCKER_GCR_REPO_URL < ~/.gcloud-api-key.json
            - docker push $DOCKER_GCR_REPO_URL/$GCLOUD_PROD_PROJECT_ID/$DOCKER_IMAGE_NAME:latest
            - docker tag $DOCKER_GCR_REPO_URL/$GCLOUD_PROD_PROJECT_ID/$DOCKER_IMAGE_NAME:latest $DOCKER_GCR_REPO_URL/$GCLOUD_PROD_PROJECT_ID/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT_SHORT
            - docker push $DOCKER_GCR_REPO_URL/$GCLOUD_PROD_PROJECT_ID/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT_SHORT
definitions:
  services:
    docker:
      memory: 2048
